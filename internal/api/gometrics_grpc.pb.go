// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.15.8
// source: internal/api/gometrics.proto

package apipb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GometricAPI_UpdateMeticValue_FullMethodName = "/apipb.GometricAPI/UpdateMeticValue"
	GometricAPI_GetMeticValue_FullMethodName    = "/apipb.GometricAPI/GetMeticValue"
)

// GometricAPIClient is the client API for GometricAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GometricAPIClient interface {
	UpdateMeticValue(ctx context.Context, in *Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetMeticValue(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type gometricAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewGometricAPIClient(cc grpc.ClientConnInterface) GometricAPIClient {
	return &gometricAPIClient{cc}
}

func (c *gometricAPIClient) UpdateMeticValue(ctx context.Context, in *Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GometricAPI_UpdateMeticValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gometricAPIClient) GetMeticValue(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, GometricAPI_GetMeticValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GometricAPIServer is the server API for GometricAPI service.
// All implementations must embed UnimplementedGometricAPIServer
// for forward compatibility
type GometricAPIServer interface {
	UpdateMeticValue(context.Context, *Request) (*emptypb.Empty, error)
	GetMeticValue(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedGometricAPIServer()
}

// UnimplementedGometricAPIServer must be embedded to have forward compatible implementations.
type UnimplementedGometricAPIServer struct {
}

func (UnimplementedGometricAPIServer) UpdateMeticValue(context.Context, *Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMeticValue not implemented")
}
func (UnimplementedGometricAPIServer) GetMeticValue(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeticValue not implemented")
}
func (UnimplementedGometricAPIServer) mustEmbedUnimplementedGometricAPIServer() {}

// UnsafeGometricAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GometricAPIServer will
// result in compilation errors.
type UnsafeGometricAPIServer interface {
	mustEmbedUnimplementedGometricAPIServer()
}

func RegisterGometricAPIServer(s grpc.ServiceRegistrar, srv GometricAPIServer) {
	s.RegisterService(&GometricAPI_ServiceDesc, srv)
}

func _GometricAPI_UpdateMeticValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GometricAPIServer).UpdateMeticValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GometricAPI_UpdateMeticValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GometricAPIServer).UpdateMeticValue(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GometricAPI_GetMeticValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GometricAPIServer).GetMeticValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GometricAPI_GetMeticValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GometricAPIServer).GetMeticValue(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// GometricAPI_ServiceDesc is the grpc.ServiceDesc for GometricAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GometricAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apipb.GometricAPI",
	HandlerType: (*GometricAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateMeticValue",
			Handler:    _GometricAPI_UpdateMeticValue_Handler,
		},
		{
			MethodName: "GetMeticValue",
			Handler:    _GometricAPI_GetMeticValue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/api/gometrics.proto",
}
